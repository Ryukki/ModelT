<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
--><!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="samesite_before_clean"/>
		 <macrodef name="samesite_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="samesite_before_build"/>
		 <macrodef name="samesite_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="samesite_before_compile_core">
		 <macrodef name="samesite_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="samesite_before_compile_web" />
		 <macrodef name="samesite_after_compile_web" />
	 
	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="samesite_before_compile_hmc" />
		 <macrodef name="samesite_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="samesite_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="samesite_before_ear"/>
		 <macrodef name="samesite_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="samesite_before_production" />
		 <macrodef name="samesite_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="samesite_before_yunitinit" />
		 <macrodef name="samesite_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="samesite_before_yunit" />
		 <macrodef name="samesite_after_yunit" /> 
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="samesite_after_dist"/>
		 <macrodef name="samesite_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="samesite_before_dist_copy"/>
		 <macrodef name="samesite_after_dist_copy"/>
		  
 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.samesite.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.samesite.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>
     With this filter you can decide what should be excluded from development zip.
 	  	 <patternset id="extension.samesite.devzip.filter">
 	  	 Include all files from extension.source.filter.
 	  	     <patternset refid="extension.source.filter" />
         Exclude unwanted files.
 	  	  	 <exclude name="lib/exclude-me.jar" />
 	  	 </patternset>
 
--><project name="samesite_buildcallbacks">

	 <macrodef name="samesite_before_clean">
        <sequential>
        	<cleanSameSiteJar/>
        </sequential>
	 </macrodef>

	
    <macrodef name="samesite_after_build">
        <sequential>
            <patchClusterNodeInfo/>
        	<patchYTomcatJar/>
        	<createSameSiteJar/>
        </sequential>
    </macrodef>

    <!-- need to patch licenses also in cases where our extension is NOT build -->
    <macrodef name="samesite_before_ear">
        <sequential>
            <patchClusterNodeInfo/>
        	<patchYTomcatJar/>
        </sequential>
    </macrodef>

    <macrodef name="samesite_before_production">
        <sequential>
            <patchClusterNodeInfo/>
        	<patchYTomcatJar/>
        </sequential>
    </macrodef>

    <macrodef name="samesite_before_dist">
        <sequential>
            <patchClusterNodeInfo/>
        	<patchYTomcatJar/>
        </sequential>
    </macrodef>
    
    <macrodef name="patchYTomcatJar">
        <sequential>
            <if>
            	<and>
                	<available file="${platformhome}/bootstrap/bin/ytomcat.jar" />
            		<istrue value="cookies.SameSite.install.application.handler" />
            	</and>
                <then>
                    <echo> PATCHING ytomcat.jar to add cookie manager</echo>
                    <jar update="true" destfile="${platformhome}/bootstrap/bin/ytomcat.jar">
                        <fileset dir="${ext.samesite.path}/classes" includes="**/SameSiteCookieProcessor*.class"/>
                    </jar>
                </then>
                <else>
                    <echo level="warning"> ${platformhome}/bootstrap/bin/ytomcat.jar doesn't exists - cannot inject SAmeSite Cookie Processor!!!</echo>
                </else>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="createSameSiteJar">
        <sequential>
            <echo> Creating samesite.jar for injecting lib separately</echo>
            <jar update="true" destfile="${ext.samesite.path}/doc/ccv2override/samesite.jar">
                <fileset dir="${ext.samesite.path}/classes" includes="**/SameSiteCookieProcessor*.class"/>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="cleanSameSiteJar">
        <sequential>
			<delete file="${ext.samesite.path}/doc/ccv2override/samesite.jar" quiet="true"/>
        </sequential>
    </macrodef>

</project>
